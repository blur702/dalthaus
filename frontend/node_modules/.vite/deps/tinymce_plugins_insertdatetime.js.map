{
  "version": 3,
  "sources": ["../../tinymce/plugins/insertdatetime/plugin.js", "../../tinymce/plugins/insertdatetime/index.js"],
  "sourcesContent": ["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('insertdatetime_dateformat', {\n            processor: 'string',\n            default: editor.translate('%Y-%m-%d')\n        });\n        registerOption('insertdatetime_timeformat', {\n            processor: 'string',\n            default: editor.translate('%H:%M:%S')\n        });\n        registerOption('insertdatetime_formats', {\n            processor: 'string[]',\n            default: ['%H:%M:%S', '%Y-%m-%d', '%I:%M:%S %p', '%D']\n        });\n        registerOption('insertdatetime_element', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const getDateFormat = option('insertdatetime_dateformat');\n    const getTimeFormat = option('insertdatetime_timeformat');\n    const getFormats = option('insertdatetime_formats');\n    const shouldInsertTimeElement = option('insertdatetime_element');\n    const getDefaultDateTime = (editor) => {\n        const formats = getFormats(editor);\n        return formats.length > 0 ? formats[0] : getTimeFormat(editor);\n    };\n\n    const daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n    const daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n    const monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n    const monthsLong = 'January February March April May June July August September October November December'.split(' ');\n    const addZeros = (value, len) => {\n        value = '' + value;\n        if (value.length < len) {\n            for (let i = 0; i < (len - value.length); i++) {\n                value = '0' + value;\n            }\n        }\n        return value;\n    };\n    const getDateTime = (editor, fmt, date = new Date()) => {\n        fmt = fmt.replace('%D', '%m/%d/%Y');\n        fmt = fmt.replace('%r', '%I:%M:%S %p');\n        fmt = fmt.replace('%Y', '' + date.getFullYear());\n        fmt = fmt.replace('%y', '' + date.getYear());\n        fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n        fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n        fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n        fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n        fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n        fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n        fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n        fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n        fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n        fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n        fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n        fmt = fmt.replace('%%', '%');\n        return fmt;\n    };\n    const updateElement = (editor, timeElm, computerTime, userTime) => {\n        const newTimeElm = editor.dom.create('time', { datetime: computerTime }, userTime);\n        editor.dom.replace(newTimeElm, timeElm);\n        editor.selection.select(newTimeElm, true);\n        editor.selection.collapse(false);\n    };\n    const insertDateTime = (editor, format) => {\n        if (shouldInsertTimeElement(editor) && editor.selection.isEditable()) {\n            const userTime = getDateTime(editor, format);\n            let computerTime;\n            if (/%[HMSIp]/.test(format)) {\n                computerTime = getDateTime(editor, '%Y-%m-%dT%H:%M');\n            }\n            else {\n                computerTime = getDateTime(editor, '%Y-%m-%d');\n            }\n            const timeElm = editor.dom.getParent(editor.selection.getStart(), 'time');\n            if (timeElm) {\n                updateElement(editor, timeElm, computerTime, userTime);\n            }\n            else {\n                editor.insertContent('<time datetime=\"' + computerTime + '\">' + userTime + '</time>');\n            }\n        }\n        else {\n            editor.insertContent(getDateTime(editor, format));\n        }\n    };\n\n    const register$1 = (editor) => {\n        editor.addCommand('mceInsertDate', (_ui, value) => {\n            insertDateTime(editor, value !== null && value !== void 0 ? value : getDateFormat(editor));\n        });\n        editor.addCommand('mceInsertTime', (_ui, value) => {\n            insertDateTime(editor, value !== null && value !== void 0 ? value : getTimeFormat(editor));\n        });\n    };\n\n    const Cell = (initial) => {\n        let value = initial;\n        const get = () => {\n            return value;\n        };\n        const set = (v) => {\n            value = v;\n        };\n        return {\n            get,\n            set\n        };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const onSetupEditable = (editor) => (api) => {\n        const nodeChanged = () => {\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChanged);\n        nodeChanged();\n        return () => {\n            editor.off('NodeChange', nodeChanged);\n        };\n    };\n    const register = (editor) => {\n        const formats = getFormats(editor);\n        const defaultFormat = Cell(getDefaultDateTime(editor));\n        const insertDateTime = (format) => editor.execCommand('mceInsertDate', false, format);\n        editor.ui.registry.addSplitButton('insertdatetime', {\n            icon: 'insert-time',\n            tooltip: 'Insert date/time',\n            select: (value) => value === defaultFormat.get(),\n            fetch: (done) => {\n                done(global.map(formats, (format) => ({ type: 'choiceitem', text: getDateTime(editor, format), value: format })));\n            },\n            onAction: (_api) => {\n                insertDateTime(defaultFormat.get());\n            },\n            onItemAction: (_api, value) => {\n                defaultFormat.set(value);\n                insertDateTime(value);\n            },\n            onSetup: onSetupEditable(editor)\n        });\n        const makeMenuItemHandler = (format) => () => {\n            defaultFormat.set(format);\n            insertDateTime(format);\n        };\n        editor.ui.registry.addNestedMenuItem('insertdatetime', {\n            icon: 'insert-time',\n            text: 'Date/time',\n            getSubmenuItems: () => global.map(formats, (format) => ({\n                type: 'menuitem',\n                text: getDateTime(editor, format),\n                onAction: makeMenuItemHandler(format)\n            })),\n            onSetup: onSetupEditable(editor)\n        });\n    };\n\n    var Plugin = () => {\n        global$1.add('insertdatetime', (editor) => {\n            register$2(editor);\n            register$1(editor);\n            register(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n", "// Exports the \"insertdatetime\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/insertdatetime')\n//   ES2015:\n//     import 'tinymce/plugins/insertdatetime'\nrequire('./plugin.js');"],
  "mappings": "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",
  "names": ["insertDateTime"]
}
