{
  "version": 3,
  "sources": ["../../tinymce/plugins/pagebreak/plugin.js", "../../tinymce/plugins/pagebreak/index.js"],
  "sourcesContent": ["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('pagebreak_separator', {\n            processor: 'string',\n            default: '<!-- pagebreak -->'\n        });\n        registerOption('pagebreak_split_block', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const getSeparatorHtml = option('pagebreak_separator');\n    const shouldSplitBlock = option('pagebreak_split_block');\n\n    const pageBreakClass = 'mce-pagebreak';\n    const getPlaceholderHtml = (shouldSplitBlock) => {\n        const html = `<img src=\"${global.transparentSrc}\" class=\"${pageBreakClass}\" data-mce-resize=\"false\" data-mce-placeholder />`;\n        return shouldSplitBlock ? `<p>${html}</p>` : html;\n    };\n    const setup$1 = (editor) => {\n        const separatorHtml = getSeparatorHtml(editor);\n        const shouldSplitBlock$1 = () => shouldSplitBlock(editor);\n        const pageBreakSeparatorRegExp = new RegExp(separatorHtml.replace(/[\\?\\.\\*\\[\\]\\(\\)\\{\\}\\+\\^\\$\\:]/g, (a) => {\n            return '\\\\' + a;\n        }), 'gi');\n        editor.on('BeforeSetContent', (e) => {\n            e.content = e.content.replace(pageBreakSeparatorRegExp, getPlaceholderHtml(shouldSplitBlock$1()));\n        });\n        editor.on('PreInit', () => {\n            editor.serializer.addNodeFilter('img', (nodes) => {\n                let i = nodes.length, node, className;\n                while (i--) {\n                    node = nodes[i];\n                    className = node.attr('class');\n                    if (className && className.indexOf(pageBreakClass) !== -1) {\n                        // Replace parent block node if pagebreak_split_block is enabled\n                        const parentNode = node.parent;\n                        if (parentNode && editor.schema.getBlockElements()[parentNode.name] && shouldSplitBlock$1()) {\n                            parentNode.type = 3;\n                            parentNode.value = separatorHtml;\n                            parentNode.raw = true;\n                            node.remove();\n                            continue;\n                        }\n                        node.type = 3;\n                        node.value = separatorHtml;\n                        node.raw = true;\n                    }\n                }\n            });\n        });\n    };\n\n    const register$1 = (editor) => {\n        editor.addCommand('mcePageBreak', () => {\n            editor.insertContent(getPlaceholderHtml(shouldSplitBlock(editor)));\n        });\n    };\n\n    const setup = (editor) => {\n        editor.on('ResolveName', (e) => {\n            if (e.target.nodeName === 'IMG' && editor.dom.hasClass(e.target, pageBreakClass)) {\n                e.name = 'pagebreak';\n            }\n        });\n    };\n\n    const onSetupEditable = (editor) => (api) => {\n        const nodeChanged = () => {\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChanged);\n        nodeChanged();\n        return () => {\n            editor.off('NodeChange', nodeChanged);\n        };\n    };\n    const register = (editor) => {\n        const onAction = () => editor.execCommand('mcePageBreak');\n        editor.ui.registry.addButton('pagebreak', {\n            icon: 'page-break',\n            tooltip: 'Page break',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n        editor.ui.registry.addMenuItem('pagebreak', {\n            text: 'Page break',\n            icon: 'page-break',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n    };\n\n    var Plugin = () => {\n        global$1.add('pagebreak', (editor) => {\n            register$2(editor);\n            register$1(editor);\n            register(editor);\n            setup$1(editor);\n            setup(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n", "// Exports the \"pagebreak\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/pagebreak')\n//   ES2015:\n//     import 'tinymce/plugins/pagebreak'\nrequire('./plugin.js');"],
  "mappings": "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",
  "names": ["shouldSplitBlock"]
}
