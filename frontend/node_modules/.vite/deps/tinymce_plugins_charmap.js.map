{
  "version": 3,
  "sources": ["../../tinymce/plugins/charmap/plugin.js", "../../tinymce/plugins/charmap/index.js"],
  "sourcesContent": ["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const fireInsertCustomChar = (editor, chr) => {\n        return editor.dispatch('insertCustomChar', { chr });\n    };\n\n    const insertChar = (editor, chr) => {\n        const evtChr = fireInsertCustomChar(editor, chr).chr;\n        editor.execCommand('mceInsertContent', false, evtChr);\n    };\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const hasProto = (v, constructor, predicate) => {\n        var _a;\n        if (predicate(v, constructor.prototype)) {\n            return true;\n        }\n        else {\n            // String-based fallback time\n            return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n        }\n    };\n    const typeOf = (x) => {\n        const t = typeof x;\n        if (x === null) {\n            return 'null';\n        }\n        else if (t === 'object' && Array.isArray(x)) {\n            return 'array';\n        }\n        else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n            return 'string';\n        }\n        else {\n            return t;\n        }\n    };\n    const isType = (type) => (value) => typeOf(value) === type;\n    const isSimpleType = (type) => (value) => typeof value === type;\n    const eq = (t) => (a) => t === a;\n    const isArray$1 = isType('array');\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = (a) => a === null || a === undefined;\n    const isNonNullable = (a) => !isNullable(a);\n    const isFunction = isSimpleType('function');\n\n    const constant = (value) => {\n        return () => {\n            return value;\n        };\n    };\n    const never = constant(false);\n\n    /**\n     * The `Optional` type represents a value (of any type) that potentially does\n     * not exist. Any `Optional<T>` can either be a `Some<T>` (in which case the\n     * value does exist) or a `None` (in which case the value does not exist). This\n     * module defines a whole lot of FP-inspired utility functions for dealing with\n     * `Optional` objects.\n     *\n     * Comparison with null or undefined:\n     * - We don't get fancy null coalescing operators with `Optional`\n     * - We do get fancy helper functions with `Optional`\n     * - `Optional` support nesting, and allow for the type to still be nullable (or\n     * another `Optional`)\n     * - There is no option to turn off strict-optional-checks like there is for\n     * strict-null-checks\n     */\n    class Optional {\n        // The internal representation has a `tag` and a `value`, but both are\n        // private: able to be console.logged, but not able to be accessed by code\n        constructor(tag, value) {\n            this.tag = tag;\n            this.value = value;\n        }\n        // --- Identities ---\n        /**\n         * Creates a new `Optional<T>` that **does** contain a value.\n         */\n        static some(value) {\n            return new Optional(true, value);\n        }\n        /**\n         * Create a new `Optional<T>` that **does not** contain a value. `T` can be\n         * any type because we don't actually have a `T`.\n         */\n        static none() {\n            return Optional.singletonNone;\n        }\n        /**\n         * Perform a transform on an `Optional` type. Regardless of whether this\n         * `Optional` contains a value or not, `fold` will return a value of type `U`.\n         * If this `Optional` does not contain a value, the `U` will be created by\n         * calling `onNone`. If this `Optional` does contain a value, the `U` will be\n         * created by calling `onSome`.\n         *\n         * For the FP enthusiasts in the room, this function:\n         * 1. Could be used to implement all of the functions below\n         * 2. Forms a catamorphism\n         */\n        fold(onNone, onSome) {\n            if (this.tag) {\n                return onSome(this.value);\n            }\n            else {\n                return onNone();\n            }\n        }\n        /**\n         * Determine if this `Optional` object contains a value.\n         */\n        isSome() {\n            return this.tag;\n        }\n        /**\n         * Determine if this `Optional` object **does not** contain a value.\n         */\n        isNone() {\n            return !this.tag;\n        }\n        // --- Functor (name stolen from Haskell / maths) ---\n        /**\n         * Perform a transform on an `Optional` object, **if** there is a value. If\n         * you provide a function to turn a T into a U, this is the function you use\n         * to turn an `Optional<T>` into an `Optional<U>`. If this **does** contain\n         * a value then the output will also contain a value (that value being the\n         * output of `mapper(this.value)`), and if this **does not** contain a value\n         * then neither will the output.\n         */\n        map(mapper) {\n            if (this.tag) {\n                return Optional.some(mapper(this.value));\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Monad (name stolen from Haskell / maths) ---\n        /**\n         * Perform a transform on an `Optional` object, **if** there is a value.\n         * Unlike `map`, here the transform itself also returns an `Optional`.\n         */\n        bind(binder) {\n            if (this.tag) {\n                return binder(this.value);\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Traversable (name stolen from Haskell / maths) ---\n        /**\n         * For a given predicate, this function finds out if there **exists** a value\n         * inside this `Optional` object that meets the predicate. In practice, this\n         * means that for `Optional`s that do not contain a value it returns false (as\n         * no predicate-meeting value exists).\n         */\n        exists(predicate) {\n            return this.tag && predicate(this.value);\n        }\n        /**\n         * For a given predicate, this function finds out if **all** the values inside\n         * this `Optional` object meet the predicate. In practice, this means that\n         * for `Optional`s that do not contain a value it returns true (as all 0\n         * objects do meet the predicate).\n         */\n        forall(predicate) {\n            return !this.tag || predicate(this.value);\n        }\n        filter(predicate) {\n            if (!this.tag || predicate(this.value)) {\n                return this;\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Getters ---\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value.\n         */\n        getOr(replacement) {\n            return this.tag ? this.value : replacement;\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value.  Unlike `getOr`, in this method the `replacement` object is also\n         * `Optional` - meaning that this method will always return an `Optional`.\n         */\n        or(replacement) {\n            return this.tag ? this : replacement;\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value. Unlike `getOr`, in this method the `replacement` value is\n         * \"thunked\" - that is to say that you don't pass a value to `getOrThunk`, you\n         * pass a function which (if called) will **return** the `value` you want to\n         * use.\n         */\n        getOrThunk(thunk) {\n            return this.tag ? this.value : thunk();\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided Optional object does not contain a\n         * value.\n         *\n         * Unlike `or`, in this method the `replacement` value is \"thunked\" - that is\n         * to say that you don't pass a value to `orThunk`, you pass a function which\n         * (if called) will **return** the `value` you want to use.\n         *\n         * Unlike `getOrThunk`, in this method the `replacement` value is also\n         * `Optional`, meaning that this method will always return an `Optional`.\n         */\n        orThunk(thunk) {\n            return this.tag ? this : thunk();\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, throwing an\n         * exception if the provided `Optional` object does not contain a value.\n         *\n         * WARNING:\n         * You should only be using this function if you know that the `Optional`\n         * object **is not** empty (otherwise you're throwing exceptions in production\n         * code, which is bad).\n         *\n         * In tests this is more acceptable.\n         *\n         * Prefer other methods to this, such as `.each`.\n         */\n        getOrDie(message) {\n            if (!this.tag) {\n                throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n            }\n            else {\n                return this.value;\n            }\n        }\n        // --- Interop with null and undefined ---\n        /**\n         * Creates an `Optional` value from a nullable (or undefined-able) input.\n         * Null, or undefined, is converted to `None`, and anything else is converted\n         * to `Some`.\n         */\n        static from(value) {\n            return isNonNullable(value) ? Optional.some(value) : Optional.none();\n        }\n        /**\n         * Converts an `Optional` to a nullable type, by getting the value if it\n         * exists, or returning `null` if it does not.\n         */\n        getOrNull() {\n            return this.tag ? this.value : null;\n        }\n        /**\n         * Converts an `Optional` to an undefined-able type, by getting the value if\n         * it exists, or returning `undefined` if it does not.\n         */\n        getOrUndefined() {\n            return this.value;\n        }\n        // --- Utilities ---\n        /**\n         * If the `Optional` contains a value, perform an action on that value.\n         * Unlike the rest of the methods on this type, `.each` has side-effects. If\n         * you want to transform an `Optional<T>` **into** something, then this is not\n         * the method for you. If you want to use an `Optional<T>` to **do**\n         * something, then this is the method for you - provided you're okay with not\n         * doing anything in the case where the `Optional` doesn't have a value inside\n         * it. If you're not sure whether your use-case fits into transforming\n         * **into** something or **doing** something, check whether it has a return\n         * value. If it does, you should be performing a transform.\n         */\n        each(worker) {\n            if (this.tag) {\n                worker(this.value);\n            }\n        }\n        /**\n         * Turn the `Optional` object into an array that contains all of the values\n         * stored inside the `Optional`. In practice, this means the output will have\n         * either 0 or 1 elements.\n         */\n        toArray() {\n            return this.tag ? [this.value] : [];\n        }\n        /**\n         * Turn the `Optional` object into a string for debugging or printing. Not\n         * recommended for production code, but good for debugging. Also note that\n         * these days an `Optional` object can be logged to the console directly, and\n         * its inner value (if it exists) will be visible.\n         */\n        toString() {\n            return this.tag ? `some(${this.value})` : 'none()';\n        }\n    }\n    // Sneaky optimisation: every instance of Optional.none is identical, so just\n    // reuse the same object\n    Optional.singletonNone = new Optional(false);\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    const nativeSlice = Array.prototype.slice;\n    const nativePush = Array.prototype.push;\n    const map = (xs, f) => {\n        // pre-allocating array size when it's guaranteed to be known\n        // http://jsperf.com/push-allocated-vs-dynamic/22\n        const len = xs.length;\n        const r = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const x = xs[i];\n            r[i] = f(x, i);\n        }\n        return r;\n    };\n    // Unwound implementing other functions in terms of each.\n    // The code size is roughly the same, and it should allow for better optimisation.\n    // const each = function<T, U>(xs: T[], f: (x: T, i?: number, xs?: T[]) => void): void {\n    const each = (xs, f) => {\n        for (let i = 0, len = xs.length; i < len; i++) {\n            const x = xs[i];\n            f(x, i);\n        }\n    };\n    const findUntil = (xs, pred, until) => {\n        for (let i = 0, len = xs.length; i < len; i++) {\n            const x = xs[i];\n            if (pred(x, i)) {\n                return Optional.some(x);\n            }\n            else if (until(x, i)) {\n                break;\n            }\n        }\n        return Optional.none();\n    };\n    const find = (xs, pred) => {\n        return findUntil(xs, pred, never);\n    };\n    const flatten = (xs) => {\n        // Note, this is possible because push supports multiple arguments:\n        // http://jsperf.com/concat-push/6\n        // Note that in the past, concat() would silently work (very slowly) for array-like objects.\n        // With this change it will throw an error.\n        const r = [];\n        for (let i = 0, len = xs.length; i < len; ++i) {\n            // Ensure that each value is an array itself\n            if (!isArray$1(xs[i])) {\n                throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n            }\n            nativePush.apply(r, xs[i]);\n        }\n        return r;\n    };\n    const bind = (xs, f) => flatten(map(xs, f));\n    isFunction(Array.from) ? Array.from : (x) => nativeSlice.call(x);\n\n    const Cell = (initial) => {\n        let value = initial;\n        const get = () => {\n            return value;\n        };\n        const set = (v) => {\n            value = v;\n        };\n        return {\n            get,\n            set\n        };\n    };\n\n    const contains = (str, substr, start = 0, end) => {\n        const idx = str.indexOf(substr, start);\n        if (idx !== -1) {\n            return isUndefined(end) ? true : idx + substr.length <= end;\n        }\n        else {\n            return false;\n        }\n    };\n    const fromCodePoint = String.fromCodePoint;\n\n    // Run a function fn after rate ms. If another invocation occurs\n    // during the time it is waiting, reschedule the function again\n    // with the new arguments.\n    const last = (fn, rate) => {\n        let timer = null;\n        const cancel = () => {\n            if (!isNull(timer)) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n        const throttle = (...args) => {\n            cancel();\n            timer = setTimeout(() => {\n                timer = null;\n                fn.apply(null, args);\n            }, rate);\n        };\n        return {\n            cancel,\n            throttle\n        };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor) => {\n        const registerOption = editor.options.register;\n        const charMapProcessor = (value) => isFunction(value) || isArray$1(value);\n        registerOption('charmap', {\n            processor: charMapProcessor,\n        });\n        registerOption('charmap_append', {\n            processor: charMapProcessor\n        });\n    };\n    const getCharMap$1 = option('charmap');\n    const getCharMapAppend = option('charmap_append');\n\n    const isArray = global.isArray;\n    const UserDefined = 'User Defined';\n    const getDefaultCharMap = () => {\n        return [\n            // TODO: Merge categories with TBIO\n            // {\n            //   name: 'Unknown',\n            //   characters : [\n            //     [160, 'no-break space'],\n            //     [173, 'soft hyphen'],\n            //     [34, 'quotation mark']\n            //   ]\n            // },\n            { name: 'Currency',\n                characters: [\n                    [36, 'dollar sign'],\n                    [162, 'cent sign'],\n                    [8364, 'euro sign'],\n                    [163, 'pound sign'],\n                    [165, 'yen sign'],\n                    [164, 'currency sign'],\n                    [8352, 'euro-currency sign'],\n                    [8353, 'colon sign'],\n                    [8354, 'cruzeiro sign'],\n                    [8355, 'french franc sign'],\n                    [8356, 'lira sign'],\n                    [8357, 'mill sign'],\n                    [8358, 'naira sign'],\n                    [8359, 'peseta sign'],\n                    [8360, 'rupee sign'],\n                    [8361, 'won sign'],\n                    [8362, 'new sheqel sign'],\n                    [8363, 'dong sign'],\n                    [8365, 'kip sign'],\n                    [8366, 'tugrik sign'],\n                    [8367, 'drachma sign'],\n                    [8368, 'german penny symbol'],\n                    [8369, 'peso sign'],\n                    [8370, 'guarani sign'],\n                    [8371, 'austral sign'],\n                    [8372, 'hryvnia sign'],\n                    [8373, 'cedi sign'],\n                    [8374, 'livre tournois sign'],\n                    [8375, 'spesmilo sign'],\n                    [8376, 'tenge sign'],\n                    [8377, 'indian rupee sign'],\n                    [8378, 'turkish lira sign'],\n                    [8379, 'nordic mark sign'],\n                    [8380, 'manat sign'],\n                    [8381, 'ruble sign'],\n                    [20870, 'yen character'],\n                    [20803, 'yuan character'],\n                    [22291, 'yuan character, in hong kong and taiwan'],\n                    [22278, 'yen/yuan character variant one']\n                ]\n            },\n            { name: 'Text',\n                characters: [\n                    [169, 'copyright sign'],\n                    [174, 'registered sign'],\n                    [8482, 'trade mark sign'],\n                    [8240, 'per mille sign'],\n                    [181, 'micro sign'],\n                    [183, 'middle dot'],\n                    [8226, 'bullet'],\n                    [8230, 'three dot leader'],\n                    [8242, 'minutes / feet'],\n                    [8243, 'seconds / inches'],\n                    [167, 'section sign'],\n                    [182, 'paragraph sign'],\n                    [223, 'sharp s / ess-zed']\n                ]\n            },\n            { name: 'Quotations',\n                characters: [\n                    [8249, 'single left-pointing angle quotation mark'],\n                    [8250, 'single right-pointing angle quotation mark'],\n                    [171, 'left pointing guillemet'],\n                    [187, 'right pointing guillemet'],\n                    [8216, 'left single quotation mark'],\n                    [8217, 'right single quotation mark'],\n                    [8220, 'left double quotation mark'],\n                    [8221, 'right double quotation mark'],\n                    [8218, 'single low-9 quotation mark'],\n                    [8222, 'double low-9 quotation mark'],\n                    [60, 'less-than sign'],\n                    [62, 'greater-than sign'],\n                    [8804, 'less-than or equal to'],\n                    [8805, 'greater-than or equal to'],\n                    [8211, 'en dash'],\n                    [8212, 'em dash'],\n                    [175, 'macron'],\n                    [8254, 'overline'],\n                    [164, 'currency sign'],\n                    [166, 'broken bar'],\n                    [168, 'diaeresis'],\n                    [161, 'inverted exclamation mark'],\n                    [191, 'turned question mark'],\n                    [710, 'circumflex accent'],\n                    [732, 'small tilde'],\n                    [176, 'degree sign'],\n                    [8722, 'minus sign'],\n                    [177, 'plus-minus sign'],\n                    [247, 'division sign'],\n                    [8260, 'fraction slash'],\n                    [215, 'multiplication sign'],\n                    [185, 'superscript one'],\n                    [178, 'superscript two'],\n                    [179, 'superscript three'],\n                    [188, 'fraction one quarter'],\n                    [189, 'fraction one half'],\n                    [190, 'fraction three quarters']\n                ]\n            },\n            {\n                name: 'Mathematical',\n                characters: [\n                    [402, 'function / florin'],\n                    [8747, 'integral'],\n                    [8721, 'n-ary sumation'],\n                    [8734, 'infinity'],\n                    [8730, 'square root'],\n                    [8764, 'similar to'],\n                    [8773, 'approximately equal to'],\n                    [8776, 'almost equal to'],\n                    [8800, 'not equal to'],\n                    [8801, 'identical to'],\n                    [8712, 'element of'],\n                    [8713, 'not an element of'],\n                    [8715, 'contains as member'],\n                    [8719, 'n-ary product'],\n                    [8743, 'logical and'],\n                    [8744, 'logical or'],\n                    [172, 'not sign'],\n                    [8745, 'intersection'],\n                    [8746, 'union'],\n                    [8706, 'partial differential'],\n                    [8704, 'for all'],\n                    [8707, 'there exists'],\n                    [8709, 'diameter'],\n                    [8711, 'backward difference'],\n                    [8727, 'asterisk operator'],\n                    [8733, 'proportional to'],\n                    [8736, 'angle']\n                ]\n            },\n            // TODO: Merge categories with TBIO\n            // {\n            //   name: 'Undefined',\n            //   characters: [\n            //     [180, 'acute accent'],\n            //     [184, 'cedilla'],\n            //     [170, 'feminine ordinal indicator'],\n            //     [186, 'masculine ordinal indicator'],\n            //     [8224, 'dagger'],\n            //     [8225, 'double dagger']\n            //   ]\n            // },\n            {\n                name: 'Extended Latin',\n                characters: [\n                    [192, 'A - grave'],\n                    [193, 'A - acute'],\n                    [194, 'A - circumflex'],\n                    [195, 'A - tilde'],\n                    [196, 'A - diaeresis'],\n                    [197, 'A - ring above'],\n                    [256, 'A - macron'],\n                    [198, 'ligature AE'],\n                    [199, 'C - cedilla'],\n                    [200, 'E - grave'],\n                    [201, 'E - acute'],\n                    [202, 'E - circumflex'],\n                    [203, 'E - diaeresis'],\n                    [274, 'E - macron'],\n                    [204, 'I - grave'],\n                    [205, 'I - acute'],\n                    [206, 'I - circumflex'],\n                    [207, 'I - diaeresis'],\n                    [298, 'I - macron'],\n                    [208, 'ETH'],\n                    [209, 'N - tilde'],\n                    [210, 'O - grave'],\n                    [211, 'O - acute'],\n                    [212, 'O - circumflex'],\n                    [213, 'O - tilde'],\n                    [214, 'O - diaeresis'],\n                    [216, 'O - slash'],\n                    [332, 'O - macron'],\n                    [338, 'ligature OE'],\n                    [352, 'S - caron'],\n                    [217, 'U - grave'],\n                    [218, 'U - acute'],\n                    [219, 'U - circumflex'],\n                    [220, 'U - diaeresis'],\n                    [362, 'U - macron'],\n                    [221, 'Y - acute'],\n                    [376, 'Y - diaeresis'],\n                    [562, 'Y - macron'],\n                    [222, 'THORN'],\n                    [224, 'a - grave'],\n                    [225, 'a - acute'],\n                    [226, 'a - circumflex'],\n                    [227, 'a - tilde'],\n                    [228, 'a - diaeresis'],\n                    [229, 'a - ring above'],\n                    [257, 'a - macron'],\n                    [230, 'ligature ae'],\n                    [231, 'c - cedilla'],\n                    [232, 'e - grave'],\n                    [233, 'e - acute'],\n                    [234, 'e - circumflex'],\n                    [235, 'e - diaeresis'],\n                    [275, 'e - macron'],\n                    [236, 'i - grave'],\n                    [237, 'i - acute'],\n                    [238, 'i - circumflex'],\n                    [239, 'i - diaeresis'],\n                    [299, 'i - macron'],\n                    [240, 'eth'],\n                    [241, 'n - tilde'],\n                    [242, 'o - grave'],\n                    [243, 'o - acute'],\n                    [244, 'o - circumflex'],\n                    [245, 'o - tilde'],\n                    [246, 'o - diaeresis'],\n                    [248, 'o slash'],\n                    [333, 'o macron'],\n                    [339, 'ligature oe'],\n                    [353, 's - caron'],\n                    [249, 'u - grave'],\n                    [250, 'u - acute'],\n                    [251, 'u - circumflex'],\n                    [252, 'u - diaeresis'],\n                    [363, 'u - macron'],\n                    [253, 'y - acute'],\n                    [254, 'thorn'],\n                    [255, 'y - diaeresis'],\n                    [563, 'y - macron'],\n                    [913, 'Alpha'],\n                    [914, 'Beta'],\n                    [915, 'Gamma'],\n                    [916, 'Delta'],\n                    [917, 'Epsilon'],\n                    [918, 'Zeta'],\n                    [919, 'Eta'],\n                    [920, 'Theta'],\n                    [921, 'Iota'],\n                    [922, 'Kappa'],\n                    [923, 'Lambda'],\n                    [924, 'Mu'],\n                    [925, 'Nu'],\n                    [926, 'Xi'],\n                    [927, 'Omicron'],\n                    [928, 'Pi'],\n                    [929, 'Rho'],\n                    [931, 'Sigma'],\n                    [932, 'Tau'],\n                    [933, 'Upsilon'],\n                    [934, 'Phi'],\n                    [935, 'Chi'],\n                    [936, 'Psi'],\n                    [937, 'Omega'],\n                    [945, 'alpha'],\n                    [946, 'beta'],\n                    [947, 'gamma'],\n                    [948, 'delta'],\n                    [949, 'epsilon'],\n                    [950, 'zeta'],\n                    [951, 'eta'],\n                    [952, 'theta'],\n                    [953, 'iota'],\n                    [954, 'kappa'],\n                    [955, 'lambda'],\n                    [956, 'mu'],\n                    [957, 'nu'],\n                    [958, 'xi'],\n                    [959, 'omicron'],\n                    [960, 'pi'],\n                    [961, 'rho'],\n                    [962, 'final sigma'],\n                    [963, 'sigma'],\n                    [964, 'tau'],\n                    [965, 'upsilon'],\n                    [966, 'phi'],\n                    [967, 'chi'],\n                    [968, 'psi'],\n                    [969, 'omega']\n                ]\n            },\n            {\n                name: 'Symbols',\n                characters: [\n                    [8501, 'alef symbol'],\n                    [982, 'pi symbol'],\n                    [8476, 'real part symbol'],\n                    [978, 'upsilon - hook symbol'],\n                    [8472, 'Weierstrass p'],\n                    [8465, 'imaginary part']\n                ]\n            },\n            {\n                name: 'Arrows',\n                characters: [\n                    [8592, 'leftwards arrow'],\n                    [8593, 'upwards arrow'],\n                    [8594, 'rightwards arrow'],\n                    [8595, 'downwards arrow'],\n                    [8596, 'left right arrow'],\n                    [8629, 'carriage return'],\n                    [8656, 'leftwards double arrow'],\n                    [8657, 'upwards double arrow'],\n                    [8658, 'rightwards double arrow'],\n                    [8659, 'downwards double arrow'],\n                    [8660, 'left right double arrow'],\n                    [8756, 'therefore'],\n                    [8834, 'subset of'],\n                    [8835, 'superset of'],\n                    [8836, 'not a subset of'],\n                    [8838, 'subset of or equal to'],\n                    [8839, 'superset of or equal to'],\n                    [8853, 'circled plus'],\n                    [8855, 'circled times'],\n                    [8869, 'perpendicular'],\n                    [8901, 'dot operator'],\n                    [8968, 'left ceiling'],\n                    [8969, 'right ceiling'],\n                    [8970, 'left floor'],\n                    [8971, 'right floor'],\n                    [9001, 'left-pointing angle bracket'],\n                    [9002, 'right-pointing angle bracket'],\n                    [9674, 'lozenge'],\n                    [9824, 'black spade suit'],\n                    [9827, 'black club suit'],\n                    [9829, 'black heart suit'],\n                    [9830, 'black diamond suit'],\n                    [8194, 'en space'],\n                    [8195, 'em space'],\n                    [8201, 'thin space'],\n                    [8204, 'zero width non-joiner'],\n                    [8205, 'zero width joiner'],\n                    [8206, 'left-to-right mark'],\n                    [8207, 'right-to-left mark']\n                ]\n            }\n        ];\n    };\n    const charmapFilter = (charmap) => {\n        return global.grep(charmap, (item) => {\n            return isArray(item) && item.length === 2;\n        });\n    };\n    const getCharsFromOption = (optionValue) => {\n        if (isArray(optionValue)) {\n            return charmapFilter(optionValue);\n        }\n        if (typeof optionValue === 'function') {\n            return optionValue();\n        }\n        return [];\n    };\n    const extendCharMap = (editor, charmap) => {\n        const userCharMap = getCharMap$1(editor);\n        if (userCharMap) {\n            charmap = [{ name: UserDefined, characters: getCharsFromOption(userCharMap) }];\n        }\n        const userCharMapAppend = getCharMapAppend(editor);\n        if (userCharMapAppend) {\n            const userDefinedGroup = global.grep(charmap, (cg) => cg.name === UserDefined);\n            if (userDefinedGroup.length) {\n                userDefinedGroup[0].characters = [...userDefinedGroup[0].characters, ...getCharsFromOption(userCharMapAppend)];\n                return charmap;\n            }\n            return charmap.concat({ name: UserDefined, characters: getCharsFromOption(userCharMapAppend) });\n        }\n        return charmap;\n    };\n    const getCharMap = (editor) => {\n        const groups = extendCharMap(editor, getDefaultCharMap());\n        return groups.length > 1 ? [\n            {\n                name: 'All',\n                characters: bind(groups, (g) => g.characters)\n            }\n        ].concat(groups) : groups;\n    };\n\n    const get = (editor) => {\n        const getCharMap$1 = () => {\n            return getCharMap(editor);\n        };\n        const insertChar$1 = (chr) => {\n            insertChar(editor, chr);\n        };\n        return {\n            getCharMap: getCharMap$1,\n            insertChar: insertChar$1\n        };\n    };\n\n    const charMatches = (charCode, name, lowerCasePattern) => {\n        if (contains(fromCodePoint(charCode).toLowerCase(), lowerCasePattern)) {\n            return true;\n        }\n        else {\n            return contains(name.toLowerCase(), lowerCasePattern) || contains(name.toLowerCase().replace(/\\s+/g, ''), lowerCasePattern);\n        }\n    };\n    const scan = (group, pattern) => {\n        const matches = [];\n        const lowerCasePattern = pattern.toLowerCase();\n        each(group.characters, (g) => {\n            if (charMatches(g[0], g[1], lowerCasePattern)) {\n                matches.push(g);\n            }\n        });\n        return map(matches, (m) => ({\n            text: m[1],\n            value: fromCodePoint(m[0]),\n            icon: fromCodePoint(m[0])\n        }));\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, charMap) => {\n        const makeGroupItems = () => [\n            {\n                label: 'Search',\n                type: 'input',\n                name: patternName\n            },\n            {\n                type: 'collection',\n                name: 'results'\n                // TODO TINY-3229 implement collection columns properly\n                // columns: 'auto'\n            }\n        ];\n        const makeTabs = () => map(charMap, (charGroup) => ({\n            title: charGroup.name,\n            name: charGroup.name,\n            items: makeGroupItems()\n        }));\n        const makePanel = () => ({ type: 'panel', items: makeGroupItems() });\n        const makeTabPanel = () => ({ type: 'tabpanel', tabs: makeTabs() });\n        const currentTab = charMap.length === 1 ? Cell(UserDefined) : Cell('All');\n        const scanAndSet = (dialogApi, pattern) => {\n            find(charMap, (group) => group.name === currentTab.get()).each((f) => {\n                const items = scan(f, pattern);\n                dialogApi.setData({\n                    results: items\n                });\n            });\n        };\n        const SEARCH_DELAY = 40;\n        const updateFilter = last((dialogApi) => {\n            const pattern = dialogApi.getData().pattern;\n            scanAndSet(dialogApi, pattern);\n        }, SEARCH_DELAY);\n        const body = charMap.length === 1 ? makePanel() : makeTabPanel();\n        const initialData = {\n            pattern: '',\n            results: scan(charMap[0], '')\n        };\n        const bridgeSpec = {\n            title: 'Special Character',\n            size: 'normal',\n            body,\n            buttons: [\n                {\n                    type: 'cancel',\n                    name: 'close',\n                    text: 'Close',\n                    primary: true\n                }\n            ],\n            initialData,\n            onAction: (api, details) => {\n                if (details.name === 'results') {\n                    insertChar(editor, details.value);\n                    api.close();\n                }\n            },\n            onTabChange: (dialogApi, details) => {\n                currentTab.set(details.newTabName);\n                updateFilter.throttle(dialogApi);\n            },\n            onChange: (dialogApi, changeData) => {\n                if (changeData.name === patternName) {\n                    updateFilter.throttle(dialogApi);\n                }\n            }\n        };\n        const dialogApi = editor.windowManager.open(bridgeSpec);\n        dialogApi.focus(patternName);\n    };\n\n    const register$1 = (editor, charMap) => {\n        editor.addCommand('mceShowCharmap', () => {\n            open(editor, charMap);\n        });\n    };\n\n    const init = (editor, all) => {\n        editor.ui.registry.addAutocompleter('charmap', {\n            trigger: ':',\n            columns: 'auto',\n            minChars: 2,\n            fetch: (pattern, _maxResults) => new Promise((resolve, _reject) => {\n                resolve(scan(all, pattern));\n            }),\n            onAction: (autocompleteApi, rng, value) => {\n                editor.selection.setRng(rng);\n                editor.insertContent(value);\n                autocompleteApi.hide();\n            }\n        });\n    };\n\n    const onSetupEditable = (editor) => (api) => {\n        const nodeChanged = () => {\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChanged);\n        nodeChanged();\n        return () => {\n            editor.off('NodeChange', nodeChanged);\n        };\n    };\n    const register = (editor) => {\n        const onAction = () => editor.execCommand('mceShowCharmap');\n        editor.ui.registry.addButton('charmap', {\n            icon: 'insert-character',\n            tooltip: 'Special character',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n        editor.ui.registry.addMenuItem('charmap', {\n            icon: 'insert-character',\n            text: 'Special character...',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n    };\n\n    var Plugin = () => {\n        global$1.add('charmap', (editor) => {\n            register$2(editor);\n            const charMap = getCharMap(editor);\n            register$1(editor, charMap);\n            register(editor);\n            init(editor, charMap[0]);\n            return get(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n", "// Exports the \"charmap\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/charmap')\n//   ES2015:\n//     import 'tinymce/plugins/charmap'\nrequire('./plugin.js');"],
  "mappings": "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",
  "names": ["get", "getCharMap$1", "dialogApi"]
}
