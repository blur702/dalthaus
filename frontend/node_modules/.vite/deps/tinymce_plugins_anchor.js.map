{
  "version": 3,
  "sources": ["../../tinymce/plugins/anchor/plugin.js", "../../tinymce/plugins/anchor/index.js"],
  "sourcesContent": ["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('allow_html_in_named_anchor', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const allowHtmlInNamedAnchor = option('allow_html_in_named_anchor');\n\n    const namedAnchorSelector = 'a:not([href])';\n    const isEmptyString = (str) => !str;\n    const getIdFromAnchor = (elm) => {\n        const id = elm.getAttribute('id') || elm.getAttribute('name');\n        return id || '';\n    };\n    const isAnchor = (elm) => elm.nodeName.toLowerCase() === 'a';\n    const isNamedAnchor = (elm) => isAnchor(elm) && !elm.getAttribute('href') && getIdFromAnchor(elm) !== '';\n    const isEmptyNamedAnchor = (elm) => isNamedAnchor(elm) && !elm.firstChild;\n\n    const removeEmptyNamedAnchorsInSelection = (editor) => {\n        const dom = editor.dom;\n        global$1(dom).walk(editor.selection.getRng(), (nodes) => {\n            global.each(nodes, (node) => {\n                if (isEmptyNamedAnchor(node)) {\n                    dom.remove(node, false);\n                }\n            });\n        });\n    };\n    const isValidId = (id) => \n    // Follows HTML4 rules: https://www.w3.org/TR/html401/types.html#type-id\n    /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    const getNamedAnchor = (editor) => editor.dom.getParent(editor.selection.getStart(), namedAnchorSelector);\n    const getId = (editor) => {\n        const anchor = getNamedAnchor(editor);\n        if (anchor) {\n            return getIdFromAnchor(anchor);\n        }\n        else {\n            return '';\n        }\n    };\n    const createAnchor = (editor, id) => {\n        editor.undoManager.transact(() => {\n            if (!allowHtmlInNamedAnchor(editor)) {\n                editor.selection.collapse(true);\n            }\n            if (editor.selection.isCollapsed()) {\n                editor.insertContent(editor.dom.createHTML('a', { id }));\n            }\n            else {\n                // Remove any empty named anchors in the selection as they cannot be removed by the formatter since they are cef\n                removeEmptyNamedAnchorsInSelection(editor);\n                // Format is set up to truncate any partially selected named anchors so that they are not completely removed\n                editor.formatter.remove('namedAnchor', undefined, undefined, true);\n                // Insert new anchor using the formatter - will wrap selected content in anchor\n                editor.formatter.apply('namedAnchor', { value: id });\n                // Need to add visual classes to anchors if required\n                editor.addVisual();\n            }\n        });\n    };\n    const updateAnchor = (editor, id, anchorElement) => {\n        anchorElement.removeAttribute('name');\n        anchorElement.id = id;\n        editor.addVisual(); // Need to add visual classes to anchors if required\n        editor.undoManager.add();\n    };\n    const insert = (editor, id) => {\n        const anchor = getNamedAnchor(editor);\n        if (anchor) {\n            updateAnchor(editor, id, anchor);\n        }\n        else {\n            createAnchor(editor, id);\n        }\n        editor.focus();\n    };\n\n    const insertAnchor = (editor, newId) => {\n        if (!isValidId(newId)) {\n            editor.windowManager.alert('ID should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n            return false;\n        }\n        else {\n            insert(editor, newId);\n            return true;\n        }\n    };\n    const open = (editor) => {\n        const currentId = getId(editor);\n        editor.windowManager.open({\n            title: 'Anchor',\n            size: 'normal',\n            body: {\n                type: 'panel',\n                items: [\n                    {\n                        name: 'id',\n                        type: 'input',\n                        label: 'ID',\n                        placeholder: 'example'\n                    }\n                ]\n            },\n            buttons: [\n                {\n                    type: 'cancel',\n                    name: 'cancel',\n                    text: 'Cancel'\n                },\n                {\n                    type: 'submit',\n                    name: 'save',\n                    text: 'Save',\n                    primary: true\n                }\n            ],\n            initialData: {\n                id: currentId\n            },\n            onSubmit: (api) => {\n                if (insertAnchor(editor, api.getData().id)) { // TODO we need a better way to do validation\n                    api.close();\n                }\n            }\n        });\n    };\n\n    const register$1 = (editor) => {\n        editor.addCommand('mceAnchor', () => {\n            open(editor);\n        });\n    };\n\n    // Note: node.firstChild check is for the 'allow_html_in_named_anchor' setting\n    // Only want to add contenteditable attributes if there is no text within the anchor\n    const isNamedAnchorNode = (node) => isEmptyString(node.attr('href')) && !isEmptyString(node.attr('id') || node.attr('name'));\n    const isEmptyNamedAnchorNode = (node) => isNamedAnchorNode(node) && !node.firstChild;\n    const setContentEditable = (state) => (nodes) => {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (isEmptyNamedAnchorNode(node)) {\n                node.attr('contenteditable', state);\n            }\n        }\n    };\n    const setup = (editor) => {\n        editor.on('PreInit', () => {\n            editor.parser.addNodeFilter('a', setContentEditable('false'));\n            editor.serializer.addNodeFilter('a', setContentEditable(null));\n        });\n    };\n\n    const registerFormats = (editor) => {\n        editor.formatter.register('namedAnchor', {\n            inline: 'a',\n            selector: namedAnchorSelector,\n            remove: 'all',\n            split: true,\n            deep: true,\n            attributes: {\n                id: '%value'\n            },\n            onmatch: (node, _fmt, _itemName) => {\n                return isNamedAnchor(node);\n            }\n        });\n    };\n\n    const onSetupEditable = (editor) => (api) => {\n        const nodeChanged = () => {\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChanged);\n        nodeChanged();\n        return () => {\n            editor.off('NodeChange', nodeChanged);\n        };\n    };\n    const register = (editor) => {\n        const onAction = () => editor.execCommand('mceAnchor');\n        editor.ui.registry.addToggleButton('anchor', {\n            icon: 'bookmark',\n            tooltip: 'Anchor',\n            onAction,\n            onSetup: (buttonApi) => {\n                const unbindSelectorChanged = editor.selection.selectorChangedWithUnbind('a:not([href])', buttonApi.setActive).unbind;\n                const unbindEditableChanged = onSetupEditable(editor)(buttonApi);\n                return () => {\n                    unbindSelectorChanged();\n                    unbindEditableChanged();\n                };\n            }\n        });\n        editor.ui.registry.addMenuItem('anchor', {\n            icon: 'bookmark',\n            text: 'Anchor...',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n    };\n\n    var Plugin = () => {\n        global$2.add('anchor', (editor) => {\n            register$2(editor);\n            setup(editor);\n            register$1(editor);\n            register(editor);\n            editor.on('PreInit', () => {\n                registerFormats(editor);\n            });\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n", "// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\nrequire('./plugin.js');"],
  "mappings": "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",
  "names": []
}
