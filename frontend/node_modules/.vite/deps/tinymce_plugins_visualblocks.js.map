{
  "version": 3,
  "sources": ["../../tinymce/plugins/visualblocks/plugin.js", "../../tinymce/plugins/visualblocks/index.js"],
  "sourcesContent": ["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    const Cell = (initial) => {\n        let value = initial;\n        const get = () => {\n            return value;\n        };\n        const set = (v) => {\n            value = v;\n        };\n        return {\n            get,\n            set\n        };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const fireVisualBlocks = (editor, state) => {\n        editor.dispatch('VisualBlocks', { state });\n    };\n\n    const toggleVisualBlocks = (editor, pluginUrl, enabledState) => {\n        const dom = editor.dom;\n        dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n        enabledState.set(!enabledState.get());\n        fireVisualBlocks(editor, enabledState.get());\n    };\n\n    const register$2 = (editor, pluginUrl, enabledState) => {\n        editor.addCommand('mceVisualBlocks', () => {\n            toggleVisualBlocks(editor, pluginUrl, enabledState);\n        });\n    };\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$1 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('visualblocks_default_state', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const isEnabledByDefault = option('visualblocks_default_state');\n\n    const setup = (editor, pluginUrl, enabledState) => {\n        // Prevents the visualblocks from being presented in the preview of formats when that is computed\n        editor.on('PreviewFormats AfterPreviewFormats', (e) => {\n            if (enabledState.get()) {\n                editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n            }\n        });\n        editor.on('init', () => {\n            if (isEnabledByDefault(editor)) {\n                toggleVisualBlocks(editor, pluginUrl, enabledState);\n            }\n        });\n    };\n\n    const toggleActiveState = (editor, enabledState) => (api) => {\n        api.setActive(enabledState.get());\n        const editorEventCallback = (e) => api.setActive(e.state);\n        editor.on('VisualBlocks', editorEventCallback);\n        return () => editor.off('VisualBlocks', editorEventCallback);\n    };\n    const register = (editor, enabledState) => {\n        const onAction = () => editor.execCommand('mceVisualBlocks');\n        editor.ui.registry.addToggleButton('visualblocks', {\n            icon: 'visualblocks',\n            tooltip: 'Show blocks',\n            onAction,\n            onSetup: toggleActiveState(editor, enabledState),\n            context: 'any'\n        });\n        editor.ui.registry.addToggleMenuItem('visualblocks', {\n            text: 'Show blocks',\n            icon: 'visualblocks',\n            onAction,\n            onSetup: toggleActiveState(editor, enabledState),\n            context: 'any'\n        });\n    };\n\n    var Plugin = () => {\n        global.add('visualblocks', (editor, pluginUrl) => {\n            register$1(editor);\n            const enabledState = Cell(false);\n            register$2(editor, pluginUrl, enabledState);\n            register(editor, enabledState);\n            setup(editor, pluginUrl, enabledState);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n", "// Exports the \"visualblocks\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/visualblocks')\n//   ES2015:\n//     import 'tinymce/plugins/visualblocks'\nrequire('./plugin.js');"],
  "mappings": ";;;;;AAAA;AAAA;AAIA,KAAC,WAAY;AACT;AAEA,YAAM,OAAO,CAAC,YAAY;AACtB,YAAI,QAAQ;AACZ,cAAM,MAAM,MAAM;AACd,iBAAO;AAAA,QACX;AACA,cAAM,MAAM,CAAC,MAAM;AACf,kBAAQ;AAAA,QACZ;AACA,eAAO;AAAA,UACH;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,SAAS,QAAQ,KAAK,MAAM,QAAQ,uBAAuB;AAE/D,YAAM,mBAAmB,CAAC,QAAQ,UAAU;AACxC,eAAO,SAAS,gBAAgB,EAAE,MAAM,CAAC;AAAA,MAC7C;AAEA,YAAM,qBAAqB,CAAC,QAAQ,WAAW,iBAAiB;AAC5D,cAAM,MAAM,OAAO;AACnB,YAAI,YAAY,OAAO,QAAQ,GAAG,kBAAkB;AACpD,qBAAa,IAAI,CAAC,aAAa,IAAI,CAAC;AACpC,yBAAiB,QAAQ,aAAa,IAAI,CAAC;AAAA,MAC/C;AAEA,YAAM,aAAa,CAAC,QAAQ,WAAW,iBAAiB;AACpD,eAAO,WAAW,mBAAmB,MAAM;AACvC,6BAAmB,QAAQ,WAAW,YAAY;AAAA,QACtD,CAAC;AAAA,MACL;AAEA,YAAM,SAAS,CAAC,SAAS,CAAC,WAAW,OAAO,QAAQ,IAAI,IAAI;AAC5D,YAAM,aAAa,CAAC,WAAW;AAC3B,cAAM,iBAAiB,OAAO,QAAQ;AACtC,uBAAe,8BAA8B;AAAA,UACzC,WAAW;AAAA,UACX,SAAS;AAAA,QACb,CAAC;AAAA,MACL;AACA,YAAM,qBAAqB,OAAO,4BAA4B;AAE9D,YAAM,QAAQ,CAAC,QAAQ,WAAW,iBAAiB;AAE/C,eAAO,GAAG,sCAAsC,CAAC,MAAM;AACnD,cAAI,aAAa,IAAI,GAAG;AACpB,mBAAO,IAAI,YAAY,OAAO,QAAQ,GAAG,oBAAoB,EAAE,SAAS,qBAAqB;AAAA,UACjG;AAAA,QACJ,CAAC;AACD,eAAO,GAAG,QAAQ,MAAM;AACpB,cAAI,mBAAmB,MAAM,GAAG;AAC5B,+BAAmB,QAAQ,WAAW,YAAY;AAAA,UACtD;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,YAAM,oBAAoB,CAAC,QAAQ,iBAAiB,CAAC,QAAQ;AACzD,YAAI,UAAU,aAAa,IAAI,CAAC;AAChC,cAAM,sBAAsB,CAAC,MAAM,IAAI,UAAU,EAAE,KAAK;AACxD,eAAO,GAAG,gBAAgB,mBAAmB;AAC7C,eAAO,MAAM,OAAO,IAAI,gBAAgB,mBAAmB;AAAA,MAC/D;AACA,YAAM,WAAW,CAAC,QAAQ,iBAAiB;AACvC,cAAM,WAAW,MAAM,OAAO,YAAY,iBAAiB;AAC3D,eAAO,GAAG,SAAS,gBAAgB,gBAAgB;AAAA,UAC/C,MAAM;AAAA,UACN,SAAS;AAAA,UACT;AAAA,UACA,SAAS,kBAAkB,QAAQ,YAAY;AAAA,UAC/C,SAAS;AAAA,QACb,CAAC;AACD,eAAO,GAAG,SAAS,kBAAkB,gBAAgB;AAAA,UACjD,MAAM;AAAA,UACN,MAAM;AAAA,UACN;AAAA,UACA,SAAS,kBAAkB,QAAQ,YAAY;AAAA,UAC/C,SAAS;AAAA,QACb,CAAC;AAAA,MACL;AAEA,UAAI,SAAS,MAAM;AACf,eAAO,IAAI,gBAAgB,CAAC,QAAQ,cAAc;AAC9C,qBAAW,MAAM;AACjB,gBAAM,eAAe,KAAK,KAAK;AAC/B,qBAAW,QAAQ,WAAW,YAAY;AAC1C,mBAAS,QAAQ,YAAY;AAC7B,gBAAM,QAAQ,WAAW,YAAY;AAAA,QACzC,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IAOX,GAAG;AAAA;AAAA;;;ACnGH;",
  "names": []
}
